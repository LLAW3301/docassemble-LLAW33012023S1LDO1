---
# This block sets the title and short title of the app.
metadata:
  title: |
    LDO Amending Order Tool
  short title: |
    Amending Order Tool
  authors:
    - name: Isabella Trigwell
    - name: James Tsiounamis 
    - name: Sophia Zachos 
    - name: Sumedha Mujamadar
      organization: Flinders University
---
# This block attributes the work for the app to Flinders University in collaboration with the Legislative Drafting Office of Jersey.
default screen parts:
  post: |
    <div style="display: flex; height: 200px; align-items: flex-end; flex-direction: row-reverse">
    <div style="margin: 5px"><img src="https://staff.flinders.edu.au/etc.clientlibs/flinders/clientlibs/clientlib-site/resources/images/flinderuni_main_logo_black.png" height="40">
    </div>
    <div style="margin: 5px; text-align: right">
    <cite><small><i>
    Developed by Flinders University in collaboration with the Legislative Drafting Office of Jersey
    </i></small></cite>
    </div>
    </div>
---
# This block includes the Static File "navbarfile.css" in our code, which allows us to personalise the app's colours and appearance. The file can be found in the 'Static Files' folder in the docassemble playground. 
features:
  css: navbarfile.css
  debug: True
  hide standard menu: True
---
# This block declares The Jersey Government's logo as an object, which is required to display the logo in the navbar. This image file is in the 'Static' folder in the Playground.
objects:
  - JerseyLogo: DAStaticFile.using(filename='NavbarLogo.PNG')
---
# This block displays the aforementioned logo in the navbar.
mandatory: True
code: |
  set_parts(logo='<img src="' + JerseyLogo.url_for() + '" style="height: 50px;">')
---
# We use these objects to set up our data structure.  We will have:
#- a list of articles
# - in each article, a list of amendments; and
# - in each amendment a list of amendment instructions
objects:
  - articles: DAList.using(there_are_any=True, object_type=DAObject, complete_attribute='complete')
  - articles[i].amendments: DAList.using(there_are_any=True, object_type=DAObject, complete_attribute='complete')
---
# This block displays the welcome page for the app.
mandatory: True
question: Welcome to the Amending Order Tool
subquestion: |
  [FILE AmendingOrderToolFirstLogo.PNG]
  
  This app creates the amending language for amending orders.
  
  This app only prepares textual amendments – the simple insertion, deletion or substitution of text. It cannot be used for provision-level amendments.
  
  Please take care to ensure all fields are entered with correct spelling and capitalisation, because all text is used to create the draft amendments and must be correct.  
  
  To continue, press *'Continue'*, to exit, press *'Exit'*.

buttons:
  - Continue: continue
  - Exit: exit
    url: https://www.jerseylaw.je/Pages/default.aspx  
---
# Mandatory code block that drives the app
mandatory: True
code: |
  legislative_instrument 
  amending_instrument
  commencement_date
  final_screen
---
# This block asks for the name of the law being amended.
question: What is the name of the instrument you are amending?
subquestion: |
 
  For example, "Companies (Jersey) Law 1991"

fields:
    - Instrument title: legislative_instrument
      input type: area
      rows: 6
      default: |
        Companies (Jersey) Law 1991
---
# This block asks for the name of the amending order being created.
question: What is the title of the draft amending instrument?

subquestion: |
  
  For example, "Companies (Example Amendments) (Jersey) Order 202-"  

fields: 
  - Amending instrument title: amending_instrument
    input type: area
    rows: 6
    default: |
      Companies (Example Amendments) (Jersey) Order 2023
---
# This block asks the user for the commencement date of the amendments. 
question: What is the commencement date for these amendments? 
subquestion: |
    For example, '7 days after it is made' or '30th September 2023'

fields: 
  - Order comes into force: commencement_date 
    hint: e.g., 7 days after it is made
    input type: area
    default: |
      7 days after it is made
---
# This question block asks for the details of the article being amended.
question: Enter the details of the Article and Heading that you are amending.
subquestion: |

  For example, "3, Method of formation of a company"
  
fields:
  - Article number: articles[i].article_number
    hint: e.g., 3, 15A etc.
    default: |
      3
  - Article heading: articles[i].article_heading
    hint: e.g., Method of formation of a company
    default: |
      Method of formation of a company
---
# We ask for amendments in two phases. Firstly, we ask for the type of amendment, and then we ask for the amendment details. This allows us to construct appropriate labels for the amendment details.
question: What is the provision that you are amending and the amendment that you are doing? 
subquestion: |
fields:
  - Provision: articles[i].amendments[j].article_provision
    hint: e.g., (2), (1)(b), (d)(iv) etc.
    default: |
      (1)
  - Amendment type: articles[i].amendments[j].amendment_type
    datatype: radio
    choices:
      - Adding words
      - Deleting words
      - Substituting words
  - Preceding words: articles[i].amendments[j].instruction0
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Adding words'
    help: |
      Words are added by inserting them after other words. You need to give these preceding words as well as the words to be added. They will be put together to make the amending phrase ‘after X there is inserted Y’.
    default: |
      before these words
  - Words to be added: articles[i].amendments[j].instruction1
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Adding words'
    default: |
      add these words
  - Words to be deleted: articles[i].amendments[j].instruction0
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Deleting words'
    help: |
      You need to give the words you are removing from the provision. They will be used to make the amendment phrase 'X is deleted'
    default: |
      delete these words
  - Words to be omitted: articles[i].amendments[j].instruction0
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Substituting words'
    help: |
      Words are substituted by omitting words and inserting other words in their place. You need to give these omitted words and the words that you will be replacing them with. They will be put together to make the amendment phrase 'For X there is substituted Y'.
    default: |
      omit these words
  - Words to be inserted: articles[i].amendments[j].instruction1
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Substituting words'
    default: |
      insert these words
list collect:
  enable: not articles[i].amendments.has_been_gathered()
  is final: True
  add another label: Add another amendment
  label: |
     Amendment ${j + 1}.
---
# These next four code blocks drive the process of asking for articles and asking for amendments in each article.  We can have many articles and each article can have many amendments.  Docassemble has a feature called 'Groups' and we are making extensive use of this feature! 
# This code block asks for the article details and then collects the amendments for that article. Note we only ask for the article_number.  That's because this is enough to call the question.
code: |
  # Asks for the article detail and then
  # the list of amendments and then marks
  # this article as complete.
  articles[i].article_number
  articles[i].amendments.gather()
  articles[i].complete = True
---
# This code block drives the collection of the amendments.  Note we ask for the type first, and then instruction_1.
code: |
  articles[i].amendments[j].instruction0
  articles[i].amendments[j].complete = True
---
# Asks the user whether they want to add amendments to another provision.
question: Would you like to amend another Article?
yesno: articles.there_is_another
---
# Asks the user whether to make another amendment to the same provision.
question: Would you like to make another amendment to this Article?
yesno: articles[i].amendments.there_is_another
---
# This is the final screen. In this example I use two nested for loops in the subquestion to generate the list of articles and the list of the amendments for each article.  We use a code block (underneath this event) to display the amendments beautifully
event: final_screen
question: Please review the following amendments to the ${legislative_instrument}...
subquestion: |

  % for article in articles:
  **Article ${article.article_number} (${article.article_heading }) amended.** 
  
  % for amendment in article.amendments:
  * In Article ${amendment.amendment_string}
  % endfor
  
  % endfor
  
  This amending order will come into effect on the date: **${ commencement_date }**.
  
  If you would like to make any changes to your selection, please press the "Back" button at the top left of the screen, to re-enter any information. 

buttons: 
  - Restart: restart
  - Exit: exit 
    url: https://www.jerseylaw.je/Pages/default.aspx
    
attachments:
  - docx template file: LDO1doc.docx  
    name: AOT Generated File
    filename: Amending_Order_Tool_File.docx
    valid formats: 
      - docx
---
# We use a separate code block to create the amendment screen. It keeps the final_screen a bit cleaner and easier to read. The wording used below in the if statement uses the Legislative Drafting Office's standard amending language. 
code: |
  # Variables to make the code a bit less cluttered
  at = articles[i].amendments[j].amendment_type
  instr0 = articles[i].amendments[j].instruction0
  prov = articles[i].amendments[j].article_provision
  if defined('articles[i].amendments[j].instruction1'):
    instr1 = articles[i].amendments[j].instruction1

  provision_text ='{}'.format(prov)
  if at == 'Adding words':
    display_string = 'after "{}" there is inserted "{}".'.format(instr0, instr1)
  elif at == 'Deleting words':
    display_string = '"{}" is deleted.'.format(instr0)
  elif at == 'Substituting words': 
    display_string = 'for "{}" there is substituted "{}".'.format(instr0, instr1)
  articles[i].amendments[j].amendment_string = '{}{} {}'.format(articles[i].article_number, provision_text, display_string)
---