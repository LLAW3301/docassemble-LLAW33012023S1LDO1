---
# This block sets the title and short title of the app, and lists the authors.
metadata:
  title: |
    LDO Amending Order Tool
  short title: |
    Amending Order Tool
  authors:
    - name: Isabella Trigwell
    - name: James Tsiounamis 
    - name: Sophia Zachos 
    - name: Sumedha Mujamadar
      organization: Flinders University
---
# This block attributes the work for the app to Flinders University in collaboration with the Legislative Drafting Office of Jersey.
default screen parts:
  post: |
    <div style="display: flex; height: 200px; align-items: flex-end; flex-direction: row-reverse">
    <div style="margin: 5px"><img src="https://staff.flinders.edu.au/etc.clientlibs/flinders/clientlibs/clientlib-site/resources/images/flinderuni_main_logo_black.png" height="40">
    </div>
    <div style="margin: 5px; text-align: right">
    <cite><small><i>
    Developed by Flinders University in collaboration with the Legislative Drafting Office of Jersey
    </i></small></cite>
    </div>
    </div>
---
# This block includes the Static File "navbarfile.css" in our code, which allows us to personalise the app's colours and appearance. The file can be found in the 'Static Files' folder in the docassemble playground. 
features:
  css: navbarfile.css
  debug: False
  hide standard menu: True
---
# This block declares The Jersey Government's logo as an object, which is required to display the logo in the navbar. This image file is in the 'Static' folder in the Playground.
objects:
  - JerseyLogo: DAStaticFile.using(filename='NavbarLogo.PNG')
---
# This block displays the aforementioned logo in the navbar.
mandatory: True
code: |
  set_parts(logo='<img src="' + JerseyLogo.url_for() + '" style="height: 50px;">')
---
# This block declares objects that will form our data structure. There is a list of articles, and in each article, a list of amendments. 
objects:
  - articles: DAList.using(there_are_any=True, object_type=DAObject, complete_attribute='complete')
  - articles[i].amendments: DAList.using(there_are_any=True, object_type=DAObject, complete_attribute='complete')
---
# This block displays the welcome page for the app.
mandatory: True
question: Welcome to the Amending Order Tool
subquestion: |
  [FILE AmendingOrderToolFirstLogo.PNG]
  
  This app creates the amending language for amending orders.
  
  This app only prepares textual amendments – the simple insertion, deletion or substitution of text. It cannot be used for provision-level amendments.
  
  Please take care to ensure all fields are entered with correct spelling and capitalisation, because all text is used to create the draft amendments and must be correct.  
  
  To continue, press *'Continue'*, to exit, press *'Exit'*.

buttons:
  - Continue: continue
  - Exit: exit
    url: https://www.jerseylaw.je/Pages/default.aspx  
    
# Here, the exit button takes the user to Jersey's Legal Information Board website, which where Laws and Orders are publishsed for the public to see,  a neutral place for the drafters to go, 
---
# Mandatory code block that drives the app. After the initial questions are asked, the rest of the screens are called upon by variables declared in the final screen. 
mandatory: True
code: |
  legislative_instrument 
  amending_instrument
  commencement_date
  final_screen
---
# This block asks for the name of the law being amended. The input type needed to be a full text box rather than a smaller text field, because the names of amending instruments can be very long. 
question: What is the name of the instrument you are amending?
subquestion: |
 
  For example, "Companies (Jersey) Law 1991"

fields:
    - Instrument title: legislative_instrument
      input type: area
      rows: 6
      default: |
        Companies (Jersey) Law 1991
---
# This block asks for the name of the Amending Order being created. Similarly to the previous block, the input type needed to be a text box due to the length of Amending Order titles. 
question: What is the title of the draft amending instrument?

subquestion: |
  
  For example, "Companies (Example Amendments) (Jersey) Order 202-"  

fields: 
  - Amending instrument title: amending_instrument
    input type: area
    rows: 6
    default: |
      Companies (Example Amendments) (Jersey) Order 2023
---
# This block asks the user for the commencement date of the amendments. The input type is a text box rather than the datatype being 'date', because the commencement date may sometimes be written as a date, and at other times may be written as "X days after it is made".
question: What is the commencement date for these amendments? 
subquestion: |
    For example, '7 days after it is made' or 'on the 30th September 2023'

fields: 
  - Order comes into force: commencement_date 
    hint: e.g., 7 days after it is made
    input type: area
    default: |
      7 days after it is made
---
# This question block asks for the details of the Article and Heading that are being amended.
question: Enter the details of the Article and Heading that you are amending.
subquestion: |

  For example, "3, Method of formation of a company"
  
fields:
  - Article number: articles[i].article_number
    hint: e.g., 3, 15A etc.
    default: |
      2
  - Article heading: articles[i].article_heading
    hint: e.g., Method of formation of a company
    default: |
      Statement of initial terms of employment
---
# This block creates the amendment screen. When the user wants to make an amendment, they are firstly asked which provision they are amending, followed by what type of amendment they are creating. Depending on whether they are adding, substituting or deleting words, certain fields will appear to capture the appropriate amendment instructions. The user will then have the choice to add another amendment on the same screen, or delete an amendment if they choose. 
# Hints and help features have been used to ensure the user enters the amendment details in the correct format. 
question: What is the provision that you are amending and the amendment that you are doing? 
subquestion: |
fields:
  - Provision: articles[i].amendments[j].article_provision
    hint: e.g., (2), (1)(b), (d)(iv) etc.
# This help text was added in case the user forgets which Law and Article they were  amending - in the event that there are numerous articles being amended, or if the user leaves the app and returns later to continue where they left off. 
    help: | 
      You need to enter a provision within Article ${articles[i].article_number} (${articles[i].article_heading}) in the ${legislative_instrument}.
    default: |
      (3)
  - Amendment type: articles[i].amendments[j].amendment_type
    datatype: radio
    choices:
      - Adding words
      - Deleting words
      - Substituting words
  - Preceding words: articles[i].amendments[j].instruction0
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Adding words'
    help: |
      Words are added by inserting them after other words. You need to give these preceding words as well as the words to be added. They will be put together to make the amending phrase ‘after X there is inserted Y’.
    default: |
      director of the company
  - Words to be added: articles[i].amendments[j].instruction1
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Adding words'
    default: |
      or manager of the limited liability company
  - Words to be deleted: articles[i].amendments[j].instruction0
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Deleting words'
    help: |
      You need to give the words you are removing from the provision. They will be used to make the amendment phrase 'X is deleted'
    default: |
      in respect of a company
  - Words to be omitted: articles[i].amendments[j].instruction0
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Substituting words'
    help: |
      Words are substituted by omitting words and inserting other words in their place. You need to give these omitted words and the words that you will be replacing them with. They will be put together to make the amendment phrase 'For X there is substituted Y'.
    default: |
      a Jersey company
  - Words to be inserted: articles[i].amendments[j].instruction1
    show if:
      variable: articles[i].amendments[j].amendment_type
      is: 'Substituting words'
    default: |
      a limited liability company
list collect:
  enable: not articles[i].amendments.has_been_gathered()
  is final: True
  add another label: Add another amendment
  label: |
     Amendment ${j + 1}.
---
# The next three code blocks drive the process of asking for articles and asking for amendments in each article. There may be many articles and many amendments in each article.
# This code block asks for the article details and then collects the amendments for that article.
code: |
  # Asks for the article detail and then
  # the list of amendments and then marks
  # this article as complete.
  articles[i].article_number
  articles[i].amendments.gather()
  articles[i].complete = True
---
# This code block drives the collection of the amendment instructions.
code: |
  articles[i].amendments[j].instruction0
  articles[i].amendments[j].complete = True
---
# This code block asks the user whether they want to add amendments to another Article.
question: Would you like to amend another Article?
yesno: articles.there_is_another
---
# This is the final screen. There are two nested for loops in the subquestion to generate the list of articles and the list of the amendments for each article. The attachment feature is also used to generate the Amending Order document. 
event: final_screen
question: Please review the following amendments to the ${legislative_instrument}...
subquestion: |

  % for article in articles:
  **Article ${article.article_number} (${article.article_heading }) amended** 
  
  % for amendment in article.amendments:
  * In Article ${amendment.amendment_string}
  % endfor
  
  % endfor
  
  **Citation and commencement** 
  
  * This Order may be cited as the ${amending_instrument} and comes into force **${commencement_date }**.
  
  If you would like to make any changes to your selection, please press the "Back" button at the top left of the screen, to re-enter any information. 

buttons: 
  - Restart: restart
  - Exit: exit 
    url: https://www.jerseylaw.je/Pages/default.aspx
    
attachments:
  - docx template file: LDO1doc.docx  
    name: Amending Order Tool Generated File
    filename: AOT_Generated_File.docx
    valid formats: 
      - docx
---
# We use a code block to display the amendments on the final screen using the Legislative Drafting Office's standard amending language. This code block ensures that the amendments follow the required formatting of the Drafting Office. 
code: |
  # Variables to make the code a bit less cluttered
  at = articles[i].amendments[j].amendment_type
  instr0 = articles[i].amendments[j].instruction0
  prov = articles[i].amendments[j].article_provision
  if defined('articles[i].amendments[j].instruction1'):
    instr1 = articles[i].amendments[j].instruction1

  provision_text ='{}'.format(prov)
  if at == 'Adding words':
    display_string = 'after "{}" there is inserted "{}".'.format(instr0, instr1)
  elif at == 'Deleting words':
    display_string = '"{}" is deleted.'.format(instr0)
  elif at == 'Substituting words': 
    display_string = 'for "{}" there is substituted "{}".'.format(instr0, instr1)
  articles[i].amendments[j].amendment_string = '{}{} {}'.format(articles[i].article_number, provision_text, display_string)
---